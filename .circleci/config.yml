version: 2.1

# orbs:
#   slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/8GifJ5EvH4RdX6inkhGjWh/migration_<< parameters.Workflow_ID >>)
            echo "Fetch result: $SUCCESS"
            if(( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
  
  # slack_notify:
  #   steps:
  #     - slack/notify:
  #         channel: devops
  #         event: fail
  #         template: basic_fail_1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Testing
          command: |
            cd frontend
            npm install
            npm test
      # - slack_notify

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Testing
          command: |
            cd backend
            npm install
            npm test
      # - slack_notify

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Scaning
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            # npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Scaning
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:cf:41:ab:3d:0e:13:b7:52:e7:f9:bb:69:ab:43:70"]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo VERSION=1.0 >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      # - slack_notify

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/8GifJ5EvH4RdX6inkhGjWh/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              echo "Inserted to kvdb"
            fi
      - destroy-environment
      # - revert-migrations
      # - slack_notify

  deploy-frontend:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip curl nodejs npm aws-cli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      # - slack_notify

  deploy-backend:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:cf:41:ab:3d:0e:13:b7:52:e7:f9:bb:69:ab:43:70"]
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip curl nodejs npm ansible aws-cli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            # cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
      # - slack_notify

  # smoke-test:
  #   docker:
  #     - image: python:3.8-alpine
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache curl aws-cli
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           echo $BACKEND_IP
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo ${API_URL}
  #           sleep 60
  #           if curl ${API_URL}/api/status | grep "ok"
  #           then
  #               return 0
  #           else
  #               return 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
  #           echo "FE_URL: ${URL}" 
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #               # Change this to 0 after the job fails
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy-environment
  #     - revert-migrations

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation \
  #               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #               --no-paginate --output text)
  #           echo ${OldWorkflowID} >> ~/OldWorkflowID.txt
  #           cat ~/OldWorkflowID.txt
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name InitialStack \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - OldWorkflowID.txt
  #     - destroy-environment
  #     - revert-migrations

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Cleanup
  #         command: |
  #           # Fetch the Old workflow ID
  #           cat ~/OldWorkflowID.txt
  #           OldWorkflowID=$(cat ~/OldWorkflowID.txt)
  #           echo OldWorkflowID: ${OldWorkflowID}
  #           echo CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
            
  #           if [[ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}"  ]]
  #           then
  #             echo "------------------ Start To Clean ---------------"
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #             echo "------------------ Clean Done ---------------"
  #           else
  #             echo "------------------ Cannot Cleanup ---------------"
  #           fi
  #     # - slack_notify

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
