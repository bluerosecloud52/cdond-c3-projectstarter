
version: 2.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              
  revert-migrations:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert Migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -k  https://kvdb.io/8GifJ5EvH4RdX6inkhGjWh/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            exit 1
            fi

jobs:
  build-frontend:
  
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-buildtest]
      - run:
          name: "Build Front End"
          command: |
            cd frontend
            npm i
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend_buildtest           


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-buildtest]
      - run:
          name: "Build Back End"
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend_buildtest      
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend_buildtest]
      - run: 
          name: Front End test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend_buildtest]
      - run: 
          name: Back End test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend_buildtest]
      - run: 
          name: scanning front end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend_buildtest]
      - run: 
          name: scanning backend end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/backend.yml \
             --tags project=udapeople \
             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/frontend.yml \
             --tags project=udapeople \
             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"         

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            export BACKEND_SERVER_IP=$(aws ec2 describe-instances \
                                --filters 'Name=tag:Name,Values=backend-*' \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "backend_serverIP = ${BACKEND_SERVER_IP}"
            echo ${BACKEND_SERVER_IP} >> inventory.txt
            cat inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - attach_workspace:
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
              
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar, gzip and awscli
          command: |
            apk add openssh-client
            apk add tar gzip
            apk update pip3
            pip3 install awscli
      - attach_workspace:
          at:  ~/ 
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - add_ssh_keys:
          fingerprints: ["ba:cf:41:ab:3d:0e:13:b7:52:e7:f9:bb:69:ab:43:70"]
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Configure server
          command: | 
            cd ~/project/.circleci/ansible
            ansible-playbook -vvvv -i ~/project/.circleci/ansible/inventory.txt  configure-server.yml 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend_buildtest]
      - run:
          name: install dependencies
          command: |
            sudo apt-get install -y python3-pip
            sudo pip3 install awscli     
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run build
            npm run migrations:revert        
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt         
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
             echo "its successfully migrated - storing SUCCESS -> 1"
             curl -k https://kvdb.io/8GifJ5EvH4RdX6inkhGjWh/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi   
            echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
      - revert-migrations:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar, gzip and awscli
          command: |
            apk add openssh-client
            apk add tar gzip
            apk add --update --no-cache nodejs npm
            apk update pip3
            pip3 install awscli        
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                                --filters 'Name=tag:Name,Values=backend-*' \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:cf:41:ab:3d:0e:13:b7:52:e7:f9:bb:69:ab:43:70"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update openssh-client
            apk add --update tar gzip ansible nodejs npm curl
            apk update pip3
            pip3 install awscli
      - run:
          name: taring the backend file
          command: |
            touch .env
            echo ENVIROMENT=production > .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -lart
            cat .env
            mv .env backend
            tar -C backend -czvf artifact.tar.gz .

      - store_artifacts:
          path: ~/project/artifact.tar.gz

      - run:  
          name: invoke ansible script
          command: |
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
            echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
     
     
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  # smoke-test:
  #   docker:
  #    - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl
  #           apk update pip3
  #           pip3 install awscli     

  #     - run:
  #         name: Backend smoke test
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #                               --filters 'Name=tag:Name,Values=backend-*' \
  #                               --query 'Reservations[*].Instances[*].PublicIpAddress' --output text) 
  #           API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #           if curl "${API_URL}/api/status" | grep "ok"
  #           then
  #           return 0
  #           else
  #           return 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |            
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
  #           echo ${URL} 
  #           if curl  -s ${URL} | grep "Welcome"
  #           then
  #           return 0
  #           else
  #           return 1
  #           fi
  #           echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     


  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: yum install -y tar gzip
  #     - run:
  #         name: update cloud front distribution
  #         command: |
  #           aws cloudformation deploy \
  #            --template-file .circleci/files/cloudfront.yml \
  #            --stack-name InitialStack \
  #            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #            --tags project=udapeople    
             
  #           echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"    
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    


  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation \
  #           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)

  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

  #           # fetch all stacks names   

  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #           --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
  #           echo Stack names: "${STACKS[@]}"    
            
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #           echo "=============delete confirmed======================="
  #           aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
  #           aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #           aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           else
  #           echo "==============cannot cleanup========================"
  #           echo "no stacks found"
  #           fi        


workflows:
  udapeopleflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]   
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]     
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: main
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]      
      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [deploy-backend]
      # - smoke-test:
      #     requires: [deploy-frontend, deploy-backend]
      # - cloudfront-update:
      #     requires: [smoke-test]
  #    - cleanup:
  #        requires: [cloudfront-update]